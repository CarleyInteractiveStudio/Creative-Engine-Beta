const fs = require('fs');
const path = require('path');

const projectName = process.argv[2];

if (!projectName) {
    console.error("Por favor, proporciona un nombre para tu proyecto.");
    console.log("Uso: node create-project.js <nombre-del-proyecto>");
    process.exit(1);
}

const projectPath = path.join(process.cwd(), projectName);
const sourcePath = __dirname; // Directorio de ces-transpiler

if (fs.existsSync(projectPath)) {
    console.error(`¬°Error! El directorio '${projectName}' ya existe.`);
    process.exit(1);
}

console.log(`Creando proyecto '${projectName}'...`);

// 1. Crear directorios del proyecto
fs.mkdirSync(projectPath, { recursive: true });
fs.mkdirSync(path.join(projectPath, 'assets'), { recursive: true });
fs.mkdirSync(path.join(projectPath, 'modules'), { recursive: true });
fs.mkdirSync(path.join(projectPath, 'assets/tutorial'), { recursive: true });

console.log("Directorios creados.");

// 2. Crear el archivo README del tutorial
const tutorialContent = `
# ¬°Bienvenido a Creative Engine! - Gu√≠a de Inicio R√°pido

¬°Felicidades por crear tu nuevo proyecto! Est√°s a un paso de dar vida a tus ideas. Esta gu√≠a te ayudar√° a comenzar tu viaje como creador de videojuegos. Recuerda: cada gran universo comenz√≥ con una sola l√≠nea de c√≥digo, ¬°y t√∫ ya diste el primer paso!

---

## 1. Tus Creaciones son 100% Tuyas

**Licencia y Propiedad:** Queremos que te sientas seguro y libre para crear. Por eso, nuestra licencia es clara: **todo videojuego, arte o contenido que crees con Creative Engine es 100% de tu propiedad.**

No reclamamos derechos sobre tus juegos, ni participaci√≥n en tus ganancias. Tu creatividad y tu trabajo te pertenecen por completo. ¬°As√≠ que sue√±a en grande!

---

## 2. √önete a Nuestra Comunidad de Creadores

¬°No est√°s solo en esta aventura! Creative Engine es un proyecto hecho con pasi√≥n, y nuestra comunidad es el coraz√≥n que lo hace latir. Conectarte con otros desarrolladores es la mejor forma de aprender, resolver dudas y encontrar inspiraci√≥n.

**¬°√önete a nuestros canales oficiales y ay√∫danos a construir algo incre√≠ble!**

*   **[üë• Grupo de Facebook](https://www.facebook.com/share/g/19VVcyGHHq/)**: Este es el lugar perfecto para empezar. Aqu√≠ encontrar√°s **tutoriales**, podr√°s **iniciar debates** sobre desarrollo, **mostrar tus avances** y, lo m√°s importante, **pedir ayuda**. Siempre intentaremos verificar las publicaciones y responder tus dudas para que nunca te sientas atascado.
*   **[üì¢ Canal de WhatsApp](https://whatsapp.com/channel/0029Vao9B2OJP21CsSXDHL20)**: √önete para recibir las noticias m√°s recientes, actualizaciones del motor y anuncios importantes directamente en tu m√≥vil.
*   **[üé¨ Canal de Facebook](https://www.facebook.com/share/19ccrRy1kZ/)**: S√≠guenos para ver contenido inspirador, proyectos destacados de la comunidad y mucho m√°s.

Tu participaci√≥n es lo que hace a esta comunidad especial. **Comparte el enlace del motor con tus amigos y en redes sociales:** [https://carleyinteractivestudio.github.io/Creative-Engine-Beta/](https://carleyinteractivestudio.github.io/Creative-Engine-Beta/)

---

## 3. Tutorial: Programando tu Primer Juego en \`.ces\`

Nuestro lenguaje de scripting, \`.ces\`, est√° dise√±ado para ser sencillo y potente. Aqu√≠ tienes un tutorial detallado para que empieces a programar ya mismo.

### Paso 1: Entendiendo la Estructura B√°sica

Todo script \`.ces\` tiene dos funciones principales: \`star()\` y \`update()\`.

*   \`public star()\`: Se ejecuta **una sola vez** cuando el juego comienza. Es el lugar perfecto para configurar tu escena, cargar modelos, posicionar la c√°mara, etc.
*   \`public update(deltaTime)\`: Se ejecuta en **cada fotograma (frame)** del juego. Aqu√≠ va toda la l√≥gica que se repite, como mover personajes, comprobar colisiones o leer la entrada del jugador. \`deltaTime\` es el tiempo que ha pasado desde el √∫ltimo fotograma, ¬°√∫salo para que el movimiento sea fluido sin importar la velocidad del ordenador!

### Paso 2: Importando M√≥dulos del Motor

Para usar las funciones del motor (como la f√≠sica, la interfaz de usuario, etc.), primero debes "importarlas" al principio de tu archivo. Esto se hace con la palabra clave \`using\`.

\`\`\`ces
// Importa los m√≥dulos que necesitar√°s
using creative.engine;        // Funciones principales del motor
using creative.engine.core;     // Funciones del n√∫cleo
using creative.engine.ui;       // Para crear textos, botones, etc.
using creative.engine.physics;  // Para usar la gravedad y otras fuerzas
\`\`\`

### Paso 3: Declarando Variables (GameObjects)

Un \`gameObject\` (o \`materia\` en nuestro lenguaje) es cualquier objeto en tu juego: el jugador, un enemigo, una moneda, una pared, etc. Para poder usar uno en tu script, primero debes declararlo.

\`\`\`ces
// Declara una variable para guardar tu jugador
public materia/gameObject jugador;
\`\`\`

### Paso 4: Dando Vida a tu Juego en \`star()\`

Ahora, usemos la funci√≥n \`star()\` para configurar la escena.

\`\`\`ces
public star() {
    // Carga una escena (si la tienes definida)
    Scene.load("Nivel1");

    // Coloca la c√°mara para que se vea bien la escena
    Camera.setPosition(0, 5, -10);

    // Muestra un texto de bienvenida en la pantalla
    UI.text("¬°Bienvenido a mi juego!", 20, 20);

    // Crea una instancia de tu jugador y carga su modelo 3D
    // El modelo "player.glb" debe estar en tu carpeta 'assets'
    materia crear jugador, "assets/player.glb";

    // ¬°Activemos la gravedad!
    ley gravedad activar;
}
\`\`\`

**Comandos clave usados:**
*   \`Camera.setPosition(x, y, z)\`: Mueve la c√°mara a una coordenada en el espacio 3D.
*   \`UI.text("mensaje", x, y)\`: Dibuja un texto en la pantalla en las coordenadas X e Y.
*   \`materia crear <variable>, "<ruta_al_modelo>"\`: Asigna un modelo 3D a tu variable de \`gameObject\`.
*   \`ley gravedad activar\`: Activa la simulaci√≥n de gravedad para todos los objetos.

### Paso 5: A√±adiendo Interactividad en \`update()\`

Finalmente, hagamos que el jugador se mueva. Usaremos la funci√≥n \`update()\` para comprobar si el jugador presiona una tecla.

\`\`\`ces
public update(deltaTime) {
    // Comprueba si la tecla "Flecha Arriba" est√° presionada
    if (Input.keyDown("ArrowUp")) {
        // Mueve al jugador hacia adelante (en el eje Z)
        jugador.z += 5 * deltaTime;
    }

    if (Input.keyDown("ArrowDown")) {
        // Mueve al jugador hacia atr√°s
        jugador.z -= 5 * deltaTime;
    }
}
\`\`\`

**¬°Eso es todo por ahora!**

Con estos conceptos, ya puedes empezar a experimentar. Intenta a√±adir m√°s movimientos, cargar diferentes modelos o mostrar otros mensajes en la pantalla. ¬°El l√≠mite es tu imaginaci√≥n!
`;
fs.writeFileSync(path.join(projectPath, 'assets/tutorial/README.md'), tutorialContent.trim());
console.log("- Archivo 'assets/tutorial/README.md' creado.");


// 3. Copiar archivos y plantillas
const filesToCopy = [
    // Plantillas
    'template/MANUAL.md',
    'template/escena_de_prueba.ces',
    // Archivos del lanzador y configuraci√≥n
    'launcher.html',
    'launcher.js',
    'project.json',
    // M√≥dulos del motor
    'modules/engine.js',
    'modules/core.js',
    'modules/ui.js',
    'modules/animator.js',
    'modules/physics.js'
];

filesToCopy.forEach(file => {
    const sourceFile = path.join(sourcePath, file);
    // Asegurarse de que el destino mantiene la estructura de carpetas
    const destFile = path.join(projectPath, file.replace('template/', ''));
    fs.copyFileSync(sourceFile, destFile);
    console.log(`- ${file} copiado.`);
});


// 4. Crear un archivo .ces b√°sico para empezar
const cesTemplate = `// ¬°Bienvenido a tu nuevo proyecto en Creative Engine!
// Empieza a escribir tu c√≥digo aqu√≠. Consulta MANUAL.md para la gu√≠a.

using creative.engine;
using creative.engine.core;
using creative.engine.ui;

public materia/gameObject jugador;

public star() {
    // Configura tu escena inicial
    Camera.setPosition(0, 0, 10);
    UI.text("Mi Juego Comienza", 10, 10);

    // materia crear jugador, "assets/player.glb";
}

public update(deltaTime) {
    // L√≥gica que se ejecuta en cada frame
    // if (Input.keyDown("ArrowUp")) {
    //     jugador.y += 10 * deltaTime;
    // }
}
`;
fs.writeFileSync(path.join(projectPath, 'main.ces'), cesTemplate);
console.log("- Archivo 'main.ces' creado.");

console.log(`\n‚úÖ ¬°Proyecto '${projectName}' creado con √©xito!`);
console.log("   Ahora tienes un entorno de juego autocontenido.");
console.log("\n   Pasos a seguir:");
console.log(`   1. Entra en el directorio: cd ${projectName}`);
console.log("   2. Escribe tu c√≥digo en 'main.ces' o 'escena_de_prueba.ces'.");
console.log("   3. Traduce tu script: node ../transpiler.js main.ces game.js");
console.log("   4. ¬°Prueba tu juego abriendo 'launcher.html' en un navegador!");
